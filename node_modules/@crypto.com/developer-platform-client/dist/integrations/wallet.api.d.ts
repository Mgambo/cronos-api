import { Balance } from '../lib/client/interfaces/token.interfaces.js';
import { CreateWalletData } from '../lib/client/interfaces/wallet.interfaces.js';
import { ApiResponse } from './api.interfaces.js';
/**
 * Creates a new wallet using the API.
 *
 * @async
 * @throws Will throw an error if the wallet creation fails or the server responds with an error.
 * @returns {Promise<ApiResponse<CreateWalletData>>} - The newly created wallet information.
 * @throws {Error} Will throw an error if the create wallet request fails or the server responds with an error message.
 *
 * @example
 * const newWallet = await createWallet();
 * console.log(newWallet);
 */
export declare const createWallet: () => Promise<ApiResponse<CreateWalletData>>;
/**
 * Fetches the native token balance of a wallet.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to check the balance for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<Balance>>} - The native token balance of the wallet.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const balance = await getBalance('1', '0x...');
 * console.log(balance);
 */
export declare const getBalance: (chainId: string, address: string, apiKey: string) => Promise<ApiResponse<Balance>>;
