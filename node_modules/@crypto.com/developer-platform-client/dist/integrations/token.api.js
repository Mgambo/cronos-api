"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swapToken = exports.wrapToken = exports.transferToken = exports.getERC20TokenBalance = exports.getNativeTokenBalance = void 0;
const global_constants_js_1 = require("../lib/constants/global.constants.js");
const api_interfaces_js_1 = require("./api.interfaces.js");
/**
 * Fetches the native token balance of a specific address on a blockchain.
 *
 * @async
 * @function getNativeTokenBalance
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to fetch the native token balance for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {string} apiKey - The API key used for authentication with the server.
 * @returns {Promise<ApiResponse<Balance>>} - A promise that resolves to the balance of the native token.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const balance = await getNativeTokenBalance('240', '0x..', 'your-api-key');
 * console.log(balance);
 */
const getNativeTokenBalance = async (chainId, address, apiKey) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/token/${chainId}/native-token-balance?address=${address}&apiKey=${apiKey}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[tokenApi/getNativeTokenBalance] - ${error.message}`);
        throw new Error(`Failed to fetch native token balance: ${error.message}`);
    }
};
exports.getNativeTokenBalance = getNativeTokenBalance;
/**
 * Fetches the ERC20 token balance of a specific address for a given contract.
 *
 * @async
 * @function getERC20TokenBalance
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to fetch the ERC20 token balance for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {string} contractAddress - The contract address of the ERC20 token.
 * @param {string} [blockHeight='latest'] - Optional. The block height to query (default is 'latest').
 * @param {string} apiKey - The API key used for authentication with the server.
 * @returns {Promise<ApiResponse<TokenBalance>>} - A promise that resolves to the balance of the ERC20 token.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const balance = await getERC20TokenBalance('240', '0x...', '0x...', 'latest', 'your-api-key');
 * console.log(balance);
 */
const getERC20TokenBalance = async (chainId, address, contractAddress, blockHeight = 'latest', apiKey) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/token/${chainId}/erc20-token-balance?address=${address}&contractAddress=${contractAddress}&blockHeight=${blockHeight}&apiKey=${apiKey}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[tokenApi/getERC20TokenBalance] - ${error.message}`);
        throw new Error(`Failed to fetch ERC20 token balance: ${error.message}`);
    }
};
exports.getERC20TokenBalance = getERC20TokenBalance;
/**
 * Sends a token transfer transaction to the blockchain.
 *
 * @async
 * @function transferToken
 * @param {string} chainId - The ID of the blockchain network.
 * @param {object} payload - The transaction payload including 'to' address (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`), 'amount', and optional 'contractAddress'.
 * @param {string} [provider] - Optional. The provider URL for the blockchain network.
 * @returns {Promise<ApiResponse<MagicLinkData>>} - A promise that resolves to the result of the transaction.
 * @throws {Error} Will throw an error if the transaction fails or the server responds with an error message.
 *
 * @example
 * const result = await transferToken('240', { to: '0x...', amount: 1 }, 'https://provider-url.com');
 * console.log(result);
 */
const transferToken = async (chainId, payload, provider) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/token/${chainId}/transfer`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.POST,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ...payload, provider }),
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[tokenApi/transferToken] - ${error.message}`);
        throw new Error(`Failed to transfer token: ${error.message}`);
    }
};
exports.transferToken = transferToken;
/**
 * Sends a token wrap transaction to the blockchain.
 *
 * @async
 * @function wrapToken
 * @param {string} chainId - The ID of the blockchain network.
 * @param {object} payload - The transaction payload including 'amount', 'fromContractAddress', and 'toContractAddress'.
 * @param {string} [provider] - Optional. The provider URL for the blockchain network.
 * @returns {Promise<ApiResponse<MagicLinkData>>} - A promise that resolves to the result of the transaction.
 * @throws {Error} Will throw an error if the transaction fails or the server responds with an error message.
 *
 * @example
 * const result = await wrapToken('1', { amount: 1, fromContractAddress: '0x...', toContractAddress: '0x...' }, 'https://provider-url.com');
 * console.log(result);
 */
const wrapToken = async (chainId, payload, provider) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/token/${chainId}/wrap`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.POST,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ...payload, provider }),
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[tokenApi/wrapToken] - ${error.message}`);
        throw new Error(`Failed to wrap token: ${error.message}`);
    }
};
exports.wrapToken = wrapToken;
/**
 * Sends a token swap transaction to the blockchain.
 *
 * @async
 * @function swapToken
 * @param {string} chainId - The ID of the blockchain network.
 * @param {object} payload - The transaction payload including 'amount', 'fromContractAddress', and 'toContractAddress'.
 * @param {string} [provider] - Optional. The provider URL for the blockchain network.
 * @returns {Promise<ApiResponse<MagicLinkData>>} - A promise that resolves to the result of the transaction.
 * @throws {Error} Will throw an error if the transaction fails or the server responds with an error message.
 *
 * @example
 * const result = await swapToken('1', { amount: 1, fromContractAddress: '0x...', toContractAddress: '0x...' }, 'https://provider-url.com');
 * console.log(result);
 */
const swapToken = async (chainId, payload, provider) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/token/${chainId}/swap`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.POST,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ...payload, provider }),
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[tokenApi/swapToken] - ${error.message}`);
        throw new Error(`Failed to swap token: ${error.message}`);
    }
};
exports.swapToken = swapToken;
