"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionStatus = exports.getTransactionByHash = exports.getTransactionsByAddress = void 0;
const global_constants_js_1 = require("../lib/constants/global.constants.js");
const api_interfaces_js_1 = require("./api.interfaces.js");
/**
 * Fetches transactions for a specific wallet address.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to fetch transactions for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {number} startBlock - The starting block number to fetch transactions from. (The maximum number of blocks that can be fetched is 10,000)
 * @param {number} endBlock - The ending block number to fetch transactions to. (The maximum number of blocks that can be fetched is 10,000)
 * @param {string} [session] - Optional. The pagination session token.
 * @param {string} [limit='20'] - Optional. The number of transactions to fetch.
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<GetTransactionsByAddressData>>} - The transactions data.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const transactions = await getTransactionsByAddress('1', '0x...', 10000, 20000, '', '10', 'your-api-key');
 * console.log(transactions);
 */
const getTransactionsByAddress = async (chainId, address, startBlock, endBlock, session = '', limit = '20', apiKey) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/transaction/${chainId}/address?address=${address}&startBlock=${startBlock}&endBlock=${endBlock}&session=${session}&limit=${limit}&apiKey=${apiKey}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[transactionApi/getTransactionsByAddress] - ${error.message}`);
        throw new Error(`Failed to fetch transactions by address: ${error.message}`);
    }
};
exports.getTransactionsByAddress = getTransactionsByAddress;
/**
 * Fetches a transaction by its hash.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} txHash - The transaction hash (e.g., 0x...).
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<GetTransactionByHashData>>} - The transaction data.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const transactionData = await getTransactionByHash('1', '0x...', 'your-api-key');
 * console.log(transactionData);
 */
const getTransactionByHash = async (chainId, txHash, apiKey) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/transaction/${chainId}/tx-hash?txHash=${txHash}&apiKey=${apiKey}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[transactionApi/getTransactionByHash] - ${error.message}`);
        throw new Error(`Failed to fetch transaction by hash: ${error.message}`);
    }
};
exports.getTransactionByHash = getTransactionByHash;
/**
 * Fetches the status of a transaction by its hash.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} txHash - The transaction hash (e.g., 0x...).
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<GetTransactionStatusData>>} - The transaction status.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const transactionStatus = await getTransactionStatus('1', '0x...', 'your-api-key');
 * console.log(transactionStatus);
 */
const getTransactionStatus = async (chainId, txHash, apiKey) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/transaction/${chainId}/status?txHash=${txHash}&apiKey=${apiKey}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[transactionApi/getTransactionStatus] - ${error.message}`);
        throw new Error(`Failed to fetch transaction status: ${error.message}`);
    }
};
exports.getTransactionStatus = getTransactionStatus;
