import { GetTransactionByHashData, GetTransactionsByAddressData, GetTransactionStatusData } from '../lib/client/interfaces/transaction.interfaces.js';
import { ApiResponse } from './api.interfaces.js';
/**
 * Fetches transactions for a specific wallet address.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to fetch transactions for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {number} startBlock - The starting block number to fetch transactions from. (The maximum number of blocks that can be fetched is 10,000)
 * @param {number} endBlock - The ending block number to fetch transactions to. (The maximum number of blocks that can be fetched is 10,000)
 * @param {string} [session] - Optional. The pagination session token.
 * @param {string} [limit='20'] - Optional. The number of transactions to fetch.
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<GetTransactionsByAddressData>>} - The transactions data.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const transactions = await getTransactionsByAddress('1', '0x...', 10000, 20000, '', '10', 'your-api-key');
 * console.log(transactions);
 */
export declare const getTransactionsByAddress: (chainId: string, address: string, startBlock: number, endBlock: number, session: string, limit: string, apiKey: string) => Promise<ApiResponse<GetTransactionsByAddressData>>;
/**
 * Fetches a transaction by its hash.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} txHash - The transaction hash (e.g., 0x...).
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<GetTransactionByHashData>>} - The transaction data.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const transactionData = await getTransactionByHash('1', '0x...', 'your-api-key');
 * console.log(transactionData);
 */
export declare const getTransactionByHash: (chainId: string, txHash: string, apiKey: string) => Promise<ApiResponse<GetTransactionByHashData>>;
/**
 * Fetches the status of a transaction by its hash.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} txHash - The transaction hash (e.g., 0x...).
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<GetTransactionStatusData>>} - The transaction status.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const transactionStatus = await getTransactionStatus('1', '0x...', 'your-api-key');
 * console.log(transactionStatus);
 */
export declare const getTransactionStatus: (chainId: string, txHash: string, apiKey: string) => Promise<ApiResponse<GetTransactionStatusData>>;
