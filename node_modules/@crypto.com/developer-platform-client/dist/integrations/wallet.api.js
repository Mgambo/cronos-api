"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBalance = exports.createWallet = void 0;
const global_constants_js_1 = require("../lib/constants/global.constants.js");
const api_interfaces_js_1 = require("./api.interfaces.js");
/**
 * Creates a new wallet using the API.
 *
 * @async
 * @throws Will throw an error if the wallet creation fails or the server responds with an error.
 * @returns {Promise<ApiResponse<CreateWalletData>>} - The newly created wallet information.
 * @throws {Error} Will throw an error if the create wallet request fails or the server responds with an error message.
 *
 * @example
 * const newWallet = await createWallet();
 * console.log(newWallet);
 */
const createWallet = async () => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/wallet`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.POST,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[walletApi/createWallet] - ${error.message}`);
        throw new Error(`Failed to create wallet: ${error.message}`);
    }
};
exports.createWallet = createWallet;
/**
 * Fetches the native token balance of a wallet.
 *
 * @async
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to check the balance for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {string} apiKey - The API key for authentication.
 * @returns {Promise<ApiResponse<Balance>>} - The native token balance of the wallet.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const balance = await getBalance('1', '0x...');
 * console.log(balance);
 */
const getBalance = async (chainId, address, apiKey) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/wallet/${chainId}/balance?address=${address}&apiKey=${apiKey}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            const serverErrorMessage = errorBody.error || `HTTP error! status: ${response.status}`;
            throw new Error(serverErrorMessage);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[walletApi/getBalance] - ${error.message}`);
        throw new Error(`Failed to fetch wallet balance: ${error.message}`);
    }
};
exports.getBalance = getBalance;
