"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFarmBySymbol = exports.getAllFarms = exports.getWhitelistedTokens = void 0;
const global_constants_js_1 = require("../lib/constants/global.constants.js");
const api_interfaces_js_1 = require("./api.interfaces.js");
/**
 * Fetches whitelisted tokens for a specific DeFi protocol.
 */
const getWhitelistedTokens = async (protocol) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/defi/whitelisted-tokens/${protocol}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            throw new Error(errorBody.error || `HTTP error! status: ${response.status}`);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[defiApi/getWhitelistedTokens] - ${error.message}`);
        throw new Error(`Failed to fetch whitelisted tokens: ${error.message}`);
    }
};
exports.getWhitelistedTokens = getWhitelistedTokens;
/**
 * Fetches all farms for a specific DeFi protocol.
 */
const getAllFarms = async (protocol) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/defi/farms/${protocol}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            throw new Error(errorBody.error || `HTTP error! status: ${response.status}`);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[defiApi/getAllFarms] - ${error.message}`);
        throw new Error(`Failed to fetch farms: ${error.message}`);
    }
};
exports.getAllFarms = getAllFarms;
/**
 * Fetches a specific farm by its symbol for a DeFi protocol.
 */
const getFarmBySymbol = async (protocol, symbol) => {
    const url = `${global_constants_js_1.BASE_URL}/api/v1/cdc-developer-platform/defi/farms/${protocol}/${symbol}`;
    try {
        const response = await fetch(url, {
            method: api_interfaces_js_1.Method.GET,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorBody = await response.json();
            throw new Error(errorBody.error || `HTTP error! status: ${response.status}`);
        }
        return await response.json();
    }
    catch (e) {
        const error = e;
        console.error(`[defiApi/getFarmBySymbol] - ${error.message}`);
        throw new Error(`Failed to fetch farm: ${error.message}`);
    }
};
exports.getFarmBySymbol = getFarmBySymbol;
