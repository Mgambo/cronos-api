import { TokenBalance } from '../lib/client/interfaces/explorer.interfaces.js';
import { Balance } from '../lib/client/interfaces/token.interfaces.js';
import { MagicLinkData } from '../lib/client/interfaces/transaction.interfaces.js';
import { ApiResponse } from './api.interfaces.js';
/**
 * Fetches the native token balance of a specific address on a blockchain.
 *
 * @async
 * @function getNativeTokenBalance
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to fetch the native token balance for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {string} apiKey - The API key used for authentication with the server.
 * @returns {Promise<ApiResponse<Balance>>} - A promise that resolves to the balance of the native token.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const balance = await getNativeTokenBalance('240', '0x..', 'your-api-key');
 * console.log(balance);
 */
export declare const getNativeTokenBalance: (chainId: string, address: string, apiKey: string) => Promise<ApiResponse<Balance>>;
/**
 * Fetches the ERC20 token balance of a specific address for a given contract.
 *
 * @async
 * @function getERC20TokenBalance
 * @param {string} chainId - The ID of the blockchain network (e.g., Ethereum, Cronos).
 * @param {string} address - The wallet address to fetch the ERC20 token balance for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
 * @param {string} contractAddress - The contract address of the ERC20 token.
 * @param {string} [blockHeight='latest'] - Optional. The block height to query (default is 'latest').
 * @param {string} apiKey - The API key used for authentication with the server.
 * @returns {Promise<ApiResponse<TokenBalance>>} - A promise that resolves to the balance of the ERC20 token.
 * @throws {Error} Will throw an error if the fetch request fails or the server responds with an error message.
 *
 * @example
 * const balance = await getERC20TokenBalance('240', '0x...', '0x...', 'latest', 'your-api-key');
 * console.log(balance);
 */
export declare const getERC20TokenBalance: (chainId: string, address: string, contractAddress: string, blockHeight: string, apiKey: string) => Promise<ApiResponse<TokenBalance>>;
/**
 * Sends a token transfer transaction to the blockchain.
 *
 * @async
 * @function transferToken
 * @param {string} chainId - The ID of the blockchain network.
 * @param {object} payload - The transaction payload including 'to' address (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`), 'amount', and optional 'contractAddress'.
 * @param {string} [provider] - Optional. The provider URL for the blockchain network.
 * @returns {Promise<ApiResponse<MagicLinkData>>} - A promise that resolves to the result of the transaction.
 * @throws {Error} Will throw an error if the transaction fails or the server responds with an error message.
 *
 * @example
 * const result = await transferToken('240', { to: '0x...', amount: 1 }, 'https://provider-url.com');
 * console.log(result);
 */
export declare const transferToken: (chainId: string, payload: {
    to: string;
    amount: number;
    contractAddress?: string;
}, provider: string) => Promise<ApiResponse<MagicLinkData>>;
/**
 * Sends a token wrap transaction to the blockchain.
 *
 * @async
 * @function wrapToken
 * @param {string} chainId - The ID of the blockchain network.
 * @param {object} payload - The transaction payload including 'amount', 'fromContractAddress', and 'toContractAddress'.
 * @param {string} [provider] - Optional. The provider URL for the blockchain network.
 * @returns {Promise<ApiResponse<MagicLinkData>>} - A promise that resolves to the result of the transaction.
 * @throws {Error} Will throw an error if the transaction fails or the server responds with an error message.
 *
 * @example
 * const result = await wrapToken('1', { amount: 1, fromContractAddress: '0x...', toContractAddress: '0x...' }, 'https://provider-url.com');
 * console.log(result);
 */
export declare const wrapToken: (chainId: string, payload: {
    amount: number;
}, provider: string) => Promise<ApiResponse<MagicLinkData>>;
/**
 * Sends a token swap transaction to the blockchain.
 *
 * @async
 * @function swapToken
 * @param {string} chainId - The ID of the blockchain network.
 * @param {object} payload - The transaction payload including 'amount', 'fromContractAddress', and 'toContractAddress'.
 * @param {string} [provider] - Optional. The provider URL for the blockchain network.
 * @returns {Promise<ApiResponse<MagicLinkData>>} - A promise that resolves to the result of the transaction.
 * @throws {Error} Will throw an error if the transaction fails or the server responds with an error message.
 *
 * @example
 * const result = await swapToken('1', { amount: 1, fromContractAddress: '0x...', toContractAddress: '0x...' }, 'https://provider-url.com');
 * console.log(result);
 */
export declare const swapToken: (chainId: string, payload: {
    amount: number;
    fromContractAddress: string;
    toContractAddress: string;
}, provider: string) => Promise<ApiResponse<MagicLinkData>>;
