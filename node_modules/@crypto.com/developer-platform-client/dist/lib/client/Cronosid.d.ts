import { ApiResponse } from '../../integrations/api.interfaces.js';
import { LookupAddressResponse, ResolveNameResponse } from './interfaces/cronosid.interfaces.js';
export declare class CronosId {
    /**
     * The registry contracts for CronosId on different chains - CronosId is supported on EVM and EVM Testnet only
     */
    private static readonly supportedChains;
    /**
     * Checks if a given string is a valid CronosId, which is a string ending with '.cro' and not empty.
     * example: 'alice.cro' is a valid CronosId, but 'alice' is not.
     *
     * @param {string} name - The string to check for CronosId validity.
     * @returns {boolean} - True if the string is a valid CronosId, false otherwise.
     */
    static isCronosId(name: string): boolean;
    /**
     * Checks if CronosId is supported on the current chain specified in the client.
     *
     * @returns {boolean} - True if CronosId is supported on the current chain, false otherwise.
     */
    static isSupported(): boolean;
    /**
     * Resolves a CronosId to a wallet address
     *
     * @param {string} cronosId - The CronosId to resolve.
     * @returns {Promise<string>} - A promise that resolves to the resolved address.
     * @throws {Error} - Throws an error if the CronosId is not valid or if the resolution fails.
     */
    static forwardResolve(cronosId: string): Promise<ApiResponse<ResolveNameResponse>>;
    /**
     * Resolves a wallet address to a CronosId if it has one
     *
     * @param {string} address - The wallet address to resolve.
     * @returns {Promise<string>} - A promise that resolves to the resolved CronosId.
     * @throws {Error} - Throws an error if the address is not valid or if the resolution fails.
     */
    static reverseResolve(address: string): Promise<ApiResponse<LookupAddressResponse>>;
}
