"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const transaction_api_js_1 = require("../../integrations/transaction.api.js");
const Client_js_1 = require("./Client.js");
/**
 * Transaction class handles operations related to fetching transaction data,
 * such as fetching transactions by address, by hash, getting transaction status, and fetching block data.
 *
 * @class
 */
class Transaction {
    /**
     * Fetches transactions for a specific wallet address.
     *
     * @async
     * @param {string} address - The wallet address to fetch transactions for (CronosIds with the `.cro` suffix are supported, e.g. `XXX.cro`)
     * @param {number} startBlock - The starting block number to fetch transactions from. (The maximum number of blocks that can be fetched is 10,000)
     * @param {number} endBlock - The ending block number to fetch transactions to. (The maximum number of blocks that can be fetched is 10,000)
     * @param {string} [session] - Optional. Session token for pagination (default is an empty string).
     * @param {string} [limit] - Optional. Limit for the number of transactions to fetch (default is 20).
     * @returns {Promise<ApiResponse<GetTransactionsByAddressData>>} - A promise that resolves to the transaction data for the specified address.
     * @throws {Error} - Throws an error if the request fails.
     *
     * @example
     * const transactions = await Transaction.getTransactionsByAddress('0x...', 10000, 20000);
     * console.log(transactions);
     */
    static async getTransactionsByAddress(address, startBlock, endBlock, session, limit) {
        const chainId = Client_js_1.Client.getChainId();
        const apiKey = Client_js_1.Client.getApiKey();
        return await (0, transaction_api_js_1.getTransactionsByAddress)(chainId, address, startBlock, endBlock, session, limit, apiKey);
    }
    /**
     * Fetches a transaction by its hash.
     *
     * @async
     * @param {string} txHash - The transaction hash to fetch the transaction details for.
     * @returns {Promise<ApiResponse<GetTransactionByHashData>>} - A promise that resolves to the transaction data.
     * @throws {Error} - Throws an error if the request fails.
     *
     * @example
     * const transaction = await Transaction.getTransactionByHash('0x...');
     * console.log(transaction);
     */
    static async getTransactionByHash(txHash) {
        const chainId = Client_js_1.Client.getChainId();
        const apiKey = Client_js_1.Client.getApiKey();
        return await (0, transaction_api_js_1.getTransactionByHash)(chainId, txHash, apiKey);
    }
    /**
     * Fetches the status of a transaction by its hash.
     *
     * @async
     * @param {string} txHash - The transaction hash to check the status for.
     * @returns {Promise<ApiResponse<GetTransactionStatusData>>} - A promise that resolves to the transaction status.
     * @throws {Error} - Throws an error if the request fails.
     *
     * @example
     * const status = await Transaction.getTransactionStatus('0x...');
     * console.log(status);
     */
    static async getTransactionStatus(txHash) {
        const chainId = Client_js_1.Client.getChainId();
        const apiKey = Client_js_1.Client.getApiKey();
        return await (0, transaction_api_js_1.getTransactionStatus)(chainId, txHash, apiKey);
    }
}
exports.Transaction = Transaction;
