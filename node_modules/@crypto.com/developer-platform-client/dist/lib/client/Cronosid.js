"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronosId = void 0;
const cronosid_api_js_1 = require("../../integrations/cronosid.api.js");
const chain_utils_js_1 = require("../utils/chain.utils.js");
const Client_js_1 = require("./Client.js");
class CronosId {
    /**
     * The registry contracts for CronosId on different chains - CronosId is supported on EVM and EVM Testnet only
     */
    static supportedChains = [chain_utils_js_1.ChainName.CRONOS_EVM, chain_utils_js_1.ChainName.CRONOS_EVM_TESTNET];
    /**
     * Checks if a given string is a valid CronosId, which is a string ending with '.cro' and not empty.
     * example: 'alice.cro' is a valid CronosId, but 'alice' is not.
     *
     * @param {string} name - The string to check for CronosId validity.
     * @returns {boolean} - True if the string is a valid CronosId, false otherwise.
     */
    static isCronosId(name) {
        const lowercaseName = name.toLowerCase();
        const parts = lowercaseName.split('.cro');
        return lowercaseName.endsWith('.cro') && parts[0].length > 0;
    }
    /**
     * Checks if CronosId is supported on the current chain specified in the client.
     *
     * @returns {boolean} - True if CronosId is supported on the current chain, false otherwise.
     */
    static isSupported() {
        const chainId = Client_js_1.Client.getChainId();
        return this.supportedChains.includes(chainId);
    }
    /**
     * Resolves a CronosId to a wallet address
     *
     * @param {string} cronosId - The CronosId to resolve.
     * @returns {Promise<string>} - A promise that resolves to the resolved address.
     * @throws {Error} - Throws an error if the CronosId is not valid or if the resolution fails.
     */
    static async forwardResolve(cronosId) {
        if (!this.isSupported()) {
            throw new Error('CronosId is not supported on the current chain');
        }
        if (!this.isCronosId(cronosId)) {
            throw new Error(`Invalid CronosId format: ${cronosId}`);
        }
        return await (0, cronosid_api_js_1.resolveName)(cronosId);
    }
    /**
     * Resolves a wallet address to a CronosId if it has one
     *
     * @param {string} address - The wallet address to resolve.
     * @returns {Promise<string>} - A promise that resolves to the resolved CronosId.
     * @throws {Error} - Throws an error if the address is not valid or if the resolution fails.
     */
    static async reverseResolve(address) {
        if (!this.isSupported()) {
            throw new Error('CronosId is not supported on the current chain');
        }
        return await (0, cronosid_api_js_1.lookupAddress)(address);
    }
}
exports.CronosId = CronosId;
